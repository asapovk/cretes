// Code generated by Prisma (prisma@1.34.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  contribution: (where?: ContributionWhereInput) => Promise<boolean>;
  participant: (where?: ParticipantWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contribution: (
    where: ContributionWhereUniqueInput
  ) => ContributionNullablePromise;
  contributions: (args?: {
    where?: ContributionWhereInput;
    orderBy?: ContributionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contribution>;
  contributionsConnection: (args?: {
    where?: ContributionWhereInput;
    orderBy?: ContributionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContributionConnectionPromise;
  participant: (
    where: ParticipantWhereUniqueInput
  ) => ParticipantNullablePromise;
  participants: (args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Participant>;
  participantsConnection: (args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ParticipantConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContribution: (data: ContributionCreateInput) => ContributionPromise;
  updateContribution: (args: {
    data: ContributionUpdateInput;
    where: ContributionWhereUniqueInput;
  }) => ContributionPromise;
  updateManyContributions: (args: {
    data: ContributionUpdateManyMutationInput;
    where?: ContributionWhereInput;
  }) => BatchPayloadPromise;
  upsertContribution: (args: {
    where: ContributionWhereUniqueInput;
    create: ContributionCreateInput;
    update: ContributionUpdateInput;
  }) => ContributionPromise;
  deleteContribution: (
    where: ContributionWhereUniqueInput
  ) => ContributionPromise;
  deleteManyContributions: (
    where?: ContributionWhereInput
  ) => BatchPayloadPromise;
  createParticipant: (data: ParticipantCreateInput) => ParticipantPromise;
  updateParticipant: (args: {
    data: ParticipantUpdateInput;
    where: ParticipantWhereUniqueInput;
  }) => ParticipantPromise;
  updateManyParticipants: (args: {
    data: ParticipantUpdateManyMutationInput;
    where?: ParticipantWhereInput;
  }) => BatchPayloadPromise;
  upsertParticipant: (args: {
    where: ParticipantWhereUniqueInput;
    create: ParticipantCreateInput;
    update: ParticipantUpdateInput;
  }) => ParticipantPromise;
  deleteParticipant: (where: ParticipantWhereUniqueInput) => ParticipantPromise;
  deleteManyParticipants: (
    where?: ParticipantWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contribution: (
    where?: ContributionSubscriptionWhereInput
  ) => ContributionSubscriptionPayloadSubscription;
  participant: (
    where?: ParticipantSubscriptionWhereInput
  ) => ParticipantSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ParticipantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "email_ASC"
  | "email_DESC";

export type ContributionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "oral_ASC"
  | "oral_DESC"
  | "abstract_ASC"
  | "abstract_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContributionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ParticipantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<ParticipantWhereInput[] | ParticipantWhereInput>;
  OR?: Maybe<ParticipantWhereInput[] | ParticipantWhereInput>;
  NOT?: Maybe<ParticipantWhereInput[] | ParticipantWhereInput>;
}

export interface ContributionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  speaker?: Maybe<ParticipantWhereInput>;
  authors_every?: Maybe<ParticipantWhereInput>;
  authors_some?: Maybe<ParticipantWhereInput>;
  authors_none?: Maybe<ParticipantWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  oral?: Maybe<Boolean>;
  oral_not?: Maybe<Boolean>;
  abstract?: Maybe<String>;
  abstract_not?: Maybe<String>;
  abstract_in?: Maybe<String[] | String>;
  abstract_not_in?: Maybe<String[] | String>;
  abstract_lt?: Maybe<String>;
  abstract_lte?: Maybe<String>;
  abstract_gt?: Maybe<String>;
  abstract_gte?: Maybe<String>;
  abstract_contains?: Maybe<String>;
  abstract_not_contains?: Maybe<String>;
  abstract_starts_with?: Maybe<String>;
  abstract_not_starts_with?: Maybe<String>;
  abstract_ends_with?: Maybe<String>;
  abstract_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContributionWhereInput[] | ContributionWhereInput>;
  OR?: Maybe<ContributionWhereInput[] | ContributionWhereInput>;
  NOT?: Maybe<ContributionWhereInput[] | ContributionWhereInput>;
}

export type ParticipantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ContributionCreateInput {
  id?: Maybe<ID_Input>;
  speaker?: Maybe<ParticipantCreateOneInput>;
  authors?: Maybe<ParticipantCreateManyInput>;
  title?: Maybe<String>;
  oral?: Maybe<Boolean>;
  abstract?: Maybe<String>;
}

export interface ParticipantCreateOneInput {
  create?: Maybe<ParticipantCreateInput>;
  connect?: Maybe<ParticipantWhereUniqueInput>;
}

export interface ParticipantCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  title?: Maybe<String>;
  email: String;
}

export interface ParticipantCreateManyInput {
  create?: Maybe<ParticipantCreateInput[] | ParticipantCreateInput>;
  connect?: Maybe<ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput>;
}

export interface ContributionUpdateInput {
  speaker?: Maybe<ParticipantUpdateOneInput>;
  authors?: Maybe<ParticipantUpdateManyInput>;
  title?: Maybe<String>;
  oral?: Maybe<Boolean>;
  abstract?: Maybe<String>;
}

export interface ParticipantUpdateOneInput {
  create?: Maybe<ParticipantCreateInput>;
  update?: Maybe<ParticipantUpdateDataInput>;
  upsert?: Maybe<ParticipantUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ParticipantWhereUniqueInput>;
}

export interface ParticipantUpdateDataInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ParticipantUpsertNestedInput {
  update: ParticipantUpdateDataInput;
  create: ParticipantCreateInput;
}

export interface ParticipantUpdateManyInput {
  create?: Maybe<ParticipantCreateInput[] | ParticipantCreateInput>;
  update?: Maybe<
    | ParticipantUpdateWithWhereUniqueNestedInput[]
    | ParticipantUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ParticipantUpsertWithWhereUniqueNestedInput[]
    | ParticipantUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput>;
  connect?: Maybe<ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput>;
  set?: Maybe<ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput>;
  disconnect?: Maybe<
    ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ParticipantScalarWhereInput[] | ParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | ParticipantUpdateManyWithWhereNestedInput[]
    | ParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface ParticipantUpdateWithWhereUniqueNestedInput {
  where: ParticipantWhereUniqueInput;
  data: ParticipantUpdateDataInput;
}

export interface ParticipantUpsertWithWhereUniqueNestedInput {
  where: ParticipantWhereUniqueInput;
  update: ParticipantUpdateDataInput;
  create: ParticipantCreateInput;
}

export interface ParticipantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<ParticipantScalarWhereInput[] | ParticipantScalarWhereInput>;
  OR?: Maybe<ParticipantScalarWhereInput[] | ParticipantScalarWhereInput>;
  NOT?: Maybe<ParticipantScalarWhereInput[] | ParticipantScalarWhereInput>;
}

export interface ParticipantUpdateManyWithWhereNestedInput {
  where: ParticipantScalarWhereInput;
  data: ParticipantUpdateManyDataInput;
}

export interface ParticipantUpdateManyDataInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ContributionUpdateManyMutationInput {
  title?: Maybe<String>;
  oral?: Maybe<Boolean>;
  abstract?: Maybe<String>;
}

export interface ParticipantUpdateInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ParticipantUpdateManyMutationInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ContributionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContributionWhereInput>;
  AND?: Maybe<
    ContributionSubscriptionWhereInput[] | ContributionSubscriptionWhereInput
  >;
  OR?: Maybe<
    ContributionSubscriptionWhereInput[] | ContributionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ContributionSubscriptionWhereInput[] | ContributionSubscriptionWhereInput
  >;
}

export interface ParticipantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ParticipantWhereInput>;
  AND?: Maybe<
    ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput
  >;
  OR?: Maybe<
    ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Contribution {
  id: ID_Output;
  title?: String;
  oral?: Boolean;
  abstract?: String;
}

export interface ContributionPromise
  extends Promise<Contribution>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  speaker: <T = ParticipantPromise>() => T;
  authors: <T = FragmentableArray<Participant>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  oral: () => Promise<Boolean>;
  abstract: () => Promise<String>;
}

export interface ContributionSubscription
  extends Promise<AsyncIterator<Contribution>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  speaker: <T = ParticipantSubscription>() => T;
  authors: <T = Promise<AsyncIterator<ParticipantSubscription>>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<AsyncIterator<String>>;
  oral: () => Promise<AsyncIterator<Boolean>>;
  abstract: () => Promise<AsyncIterator<String>>;
}

export interface ContributionNullablePromise
  extends Promise<Contribution | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  speaker: <T = ParticipantPromise>() => T;
  authors: <T = FragmentableArray<Participant>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  oral: () => Promise<Boolean>;
  abstract: () => Promise<String>;
}

export interface Participant {
  id: ID_Output;
  name: String;
  title?: String;
  email: String;
}

export interface ParticipantPromise extends Promise<Participant>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  email: () => Promise<String>;
}

export interface ParticipantSubscription
  extends Promise<AsyncIterator<Participant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface ParticipantNullablePromise
  extends Promise<Participant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  email: () => Promise<String>;
}

export interface ContributionConnection {
  pageInfo: PageInfo;
  edges: ContributionEdge[];
}

export interface ContributionConnectionPromise
  extends Promise<ContributionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContributionEdge>>() => T;
  aggregate: <T = AggregateContributionPromise>() => T;
}

export interface ContributionConnectionSubscription
  extends Promise<AsyncIterator<ContributionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContributionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContributionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContributionEdge {
  node: Contribution;
  cursor: String;
}

export interface ContributionEdgePromise
  extends Promise<ContributionEdge>,
    Fragmentable {
  node: <T = ContributionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContributionEdgeSubscription
  extends Promise<AsyncIterator<ContributionEdge>>,
    Fragmentable {
  node: <T = ContributionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContribution {
  count: Int;
}

export interface AggregateContributionPromise
  extends Promise<AggregateContribution>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContributionSubscription
  extends Promise<AsyncIterator<AggregateContribution>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ParticipantConnection {
  pageInfo: PageInfo;
  edges: ParticipantEdge[];
}

export interface ParticipantConnectionPromise
  extends Promise<ParticipantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ParticipantEdge>>() => T;
  aggregate: <T = AggregateParticipantPromise>() => T;
}

export interface ParticipantConnectionSubscription
  extends Promise<AsyncIterator<ParticipantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ParticipantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateParticipantSubscription>() => T;
}

export interface ParticipantEdge {
  node: Participant;
  cursor: String;
}

export interface ParticipantEdgePromise
  extends Promise<ParticipantEdge>,
    Fragmentable {
  node: <T = ParticipantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ParticipantEdgeSubscription
  extends Promise<AsyncIterator<ParticipantEdge>>,
    Fragmentable {
  node: <T = ParticipantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateParticipant {
  count: Int;
}

export interface AggregateParticipantPromise
  extends Promise<AggregateParticipant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateParticipantSubscription
  extends Promise<AsyncIterator<AggregateParticipant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContributionSubscriptionPayload {
  mutation: MutationType;
  node: Contribution;
  updatedFields: String[];
  previousValues: ContributionPreviousValues;
}

export interface ContributionSubscriptionPayloadPromise
  extends Promise<ContributionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContributionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContributionPreviousValuesPromise>() => T;
}

export interface ContributionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContributionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContributionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContributionPreviousValuesSubscription>() => T;
}

export interface ContributionPreviousValues {
  id: ID_Output;
  title?: String;
  oral?: Boolean;
  abstract?: String;
}

export interface ContributionPreviousValuesPromise
  extends Promise<ContributionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  oral: () => Promise<Boolean>;
  abstract: () => Promise<String>;
}

export interface ContributionPreviousValuesSubscription
  extends Promise<AsyncIterator<ContributionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  oral: () => Promise<AsyncIterator<Boolean>>;
  abstract: () => Promise<AsyncIterator<String>>;
}

export interface ParticipantSubscriptionPayload {
  mutation: MutationType;
  node: Participant;
  updatedFields: String[];
  previousValues: ParticipantPreviousValues;
}

export interface ParticipantSubscriptionPayloadPromise
  extends Promise<ParticipantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ParticipantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ParticipantPreviousValuesPromise>() => T;
}

export interface ParticipantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ParticipantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ParticipantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ParticipantPreviousValuesSubscription>() => T;
}

export interface ParticipantPreviousValues {
  id: ID_Output;
  name: String;
  title?: String;
  email: String;
}

export interface ParticipantPreviousValuesPromise
  extends Promise<ParticipantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  email: () => Promise<String>;
}

export interface ParticipantPreviousValuesSubscription
  extends Promise<AsyncIterator<ParticipantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Participant",
    embedded: false
  },
  {
    name: "Contribution",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4467`
});
export const prisma = new Prisma();
