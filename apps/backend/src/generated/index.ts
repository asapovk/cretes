// Code generated by Prisma (prisma@1.34.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  word: (where?: WordWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  word: (where: WordWhereUniqueInput) => WordNullablePromise;
  words: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Word>;
  wordsConnection: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createWord: (data: WordCreateInput) => WordPromise;
  updateWord: (args: {
    data: WordUpdateInput;
    where: WordWhereUniqueInput;
  }) => WordPromise;
  updateManyWords: (args: {
    data: WordUpdateManyMutationInput;
    where?: WordWhereInput;
  }) => BatchPayloadPromise;
  upsertWord: (args: {
    where: WordWhereUniqueInput;
    create: WordCreateInput;
    update: WordUpdateInput;
  }) => WordPromise;
  deleteWord: (where: WordWhereUniqueInput) => WordPromise;
  deleteManyWords: (where?: WordWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  word: (
    where?: WordSubscriptionWhereInput
  ) => WordSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type WordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "translation_ASC"
  | "translation_DESC"
  | "writing_ASC"
  | "writing_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type WordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface WordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  translation?: Maybe<String>;
  translation_not?: Maybe<String>;
  translation_in?: Maybe<String[] | String>;
  translation_not_in?: Maybe<String[] | String>;
  translation_lt?: Maybe<String>;
  translation_lte?: Maybe<String>;
  translation_gt?: Maybe<String>;
  translation_gte?: Maybe<String>;
  translation_contains?: Maybe<String>;
  translation_not_contains?: Maybe<String>;
  translation_starts_with?: Maybe<String>;
  translation_not_starts_with?: Maybe<String>;
  translation_ends_with?: Maybe<String>;
  translation_not_ends_with?: Maybe<String>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  synonims_every?: Maybe<WordWhereInput>;
  synonims_some?: Maybe<WordWhereInput>;
  synonims_none?: Maybe<WordWhereInput>;
  AND?: Maybe<WordWhereInput[] | WordWhereInput>;
  OR?: Maybe<WordWhereInput[] | WordWhereInput>;
  NOT?: Maybe<WordWhereInput[] | WordWhereInput>;
}

export interface WordCreateInput {
  id?: Maybe<ID_Input>;
  translation: String;
  writing: String;
  synonims?: Maybe<WordCreateManyInput>;
}

export interface WordCreateManyInput {
  create?: Maybe<WordCreateInput[] | WordCreateInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
}

export interface WordUpdateInput {
  translation?: Maybe<String>;
  writing?: Maybe<String>;
  synonims?: Maybe<WordUpdateManyInput>;
}

export interface WordUpdateManyInput {
  create?: Maybe<WordCreateInput[] | WordCreateInput>;
  update?: Maybe<
    | WordUpdateWithWhereUniqueNestedInput[]
    | WordUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WordUpsertWithWhereUniqueNestedInput[]
    | WordUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  set?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  disconnect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  deleteMany?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  updateMany?: Maybe<
    WordUpdateManyWithWhereNestedInput[] | WordUpdateManyWithWhereNestedInput
  >;
}

export interface WordUpdateWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  data: WordUpdateDataInput;
}

export interface WordUpdateDataInput {
  translation?: Maybe<String>;
  writing?: Maybe<String>;
  synonims?: Maybe<WordUpdateManyInput>;
}

export interface WordUpsertWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  update: WordUpdateDataInput;
  create: WordCreateInput;
}

export interface WordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  translation?: Maybe<String>;
  translation_not?: Maybe<String>;
  translation_in?: Maybe<String[] | String>;
  translation_not_in?: Maybe<String[] | String>;
  translation_lt?: Maybe<String>;
  translation_lte?: Maybe<String>;
  translation_gt?: Maybe<String>;
  translation_gte?: Maybe<String>;
  translation_contains?: Maybe<String>;
  translation_not_contains?: Maybe<String>;
  translation_starts_with?: Maybe<String>;
  translation_not_starts_with?: Maybe<String>;
  translation_ends_with?: Maybe<String>;
  translation_not_ends_with?: Maybe<String>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  OR?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  NOT?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
}

export interface WordUpdateManyWithWhereNestedInput {
  where: WordScalarWhereInput;
  data: WordUpdateManyDataInput;
}

export interface WordUpdateManyDataInput {
  translation?: Maybe<String>;
  writing?: Maybe<String>;
}

export interface WordUpdateManyMutationInput {
  translation?: Maybe<String>;
  writing?: Maybe<String>;
}

export interface WordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WordWhereInput>;
  AND?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
  OR?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
  NOT?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Word {
  id: ID_Output;
  translation: String;
  writing: String;
}

export interface WordPromise extends Promise<Word>, Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String>;
  writing: () => Promise<String>;
  synonims: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordSubscription
  extends Promise<AsyncIterator<Word>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  translation: () => Promise<AsyncIterator<String>>;
  writing: () => Promise<AsyncIterator<String>>;
  synonims: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordNullablePromise
  extends Promise<Word | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String>;
  writing: () => Promise<String>;
  synonims: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordConnection {
  pageInfo: PageInfo;
  edges: WordEdge[];
}

export interface WordConnectionPromise
  extends Promise<WordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordEdge>>() => T;
  aggregate: <T = AggregateWordPromise>() => T;
}

export interface WordConnectionSubscription
  extends Promise<AsyncIterator<WordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface WordEdge {
  node: Word;
  cursor: String;
}

export interface WordEdgePromise extends Promise<WordEdge>, Fragmentable {
  node: <T = WordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordEdgeSubscription
  extends Promise<AsyncIterator<WordEdge>>,
    Fragmentable {
  node: <T = WordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWord {
  count: Int;
}

export interface AggregateWordPromise
  extends Promise<AggregateWord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordSubscription
  extends Promise<AsyncIterator<AggregateWord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface WordSubscriptionPayload {
  mutation: MutationType;
  node: Word;
  updatedFields: String[];
  previousValues: WordPreviousValues;
}

export interface WordSubscriptionPayloadPromise
  extends Promise<WordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordPreviousValuesPromise>() => T;
}

export interface WordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordPreviousValuesSubscription>() => T;
}

export interface WordPreviousValues {
  id: ID_Output;
  translation: String;
  writing: String;
}

export interface WordPreviousValuesPromise
  extends Promise<WordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String>;
  writing: () => Promise<String>;
}

export interface WordPreviousValuesSubscription
  extends Promise<AsyncIterator<WordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  translation: () => Promise<AsyncIterator<String>>;
  writing: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Word",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
